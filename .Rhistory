debug(ls)
ls
library(datasets)
data(iris)
tapply(iris,mean)
2
tapply(iris,iris$Sepal.Length)
tapply(iris$Sepal.Length,iris$Species,mean)
datasets(mtcars)
library(datasets)
data(mtcars)
?mtcars
sapply(split(mtcars$mpg,mtcars$cyl),mean)
sub1 <- mtcars[mtcars[,2]==4,]
sub2 <- mtcars[mtcars[,4]==8,]
mean(sub1)-mean(sub2)
mean(sub1$hp)
mean(sub2$hp-sub1$hp)
Mean(sub2$hp)-mean(sub1$hp)
mean(sub2$hp)-mean(sub1$hp)
sub2 <- mtcars[mtcars[,2]==8,]
mean(sub2$hp)-mean(sub1$hp)
debug(ls)
ls
x <- matrix(1:4,2,2)
x
solve(x)
makeVector(c(1,2,4))
setwd("C:/Users/IBM_ADMIN/ProgrammingAssignment2")
source("cachematrix.R")
makeVector(c(1,2,3))
esc
quit
source("cachematrix.R")
nn
n
makeVector(c(1,2,4))
cachemean(c(1,2,3,4))
source("cachematrix.R")
makeVector(c(1,2,3))
n
n
n
makeVector(c(1,2,3))
cachemean(c(1,2,3))
makevector()
makeVector()
cachemean(x, ...)
cachemean(x)
x <- makeVector()
cachemean(x)
x <- makeVector(c(1,2,3))
cachemean(makeVector())
cachemean(makeVector(c(1,2,3)))
cachemean(makeVector(c(1,3,5)))
cachemean(makeVector(c("a",1)))
cachemean(makeVector(c(1,2,3,4,19)))
makeCacheMatrix <- (matrix(1:4,2,2))
makeCacheMatrix
makeCacheMatrix(matrix(1:9,3,3))
source("cachematrix.R")
makeCacheMatrix(matrix(1:9,3,3))
source("cachematrix.R")
makeCacheMatrix(matrix(1:9,3,3))
source("cachematrix.R")
makeCacheMatrix(matrix(1:9,3,3))
cacheSolve(makeCacheMatrix(matrix(1:9,3,3)))
cacheSolve(makeCacheMatrix(matrix(1:4,2,2)))
y <- makeCacheMatrix(matrix(1:4,2,2))
y
cacheSolve(y)
source("cachematrix.R")
y
cacheSolve(y)
cacheSolve(makeCacheMatrix(matrix(1:9,3,3)))
cacheSolve(makeCacheMatrix(matrix(C(1,2,3),c(4,4,6),c(7,8,9))))
?matrix
cacheSolve(makeCacheMatrix(matrix(c((1,2,3),(4,4,6),(7,8,9)))))
cacheSolve(makeCacheMatrix(matrix(c(1,2,3,4,4,6,7,8,9),3,3)))
matrix(c(1,2,3,4,4,6,7,8,9),3,3)
cacheSolve(c(1,2,3,4,4,6,7,8,9))
cacheSolve(C(1,2,3,4)
)
makeCacheMatrix(c(1,2,3,4))
source("cachematrix.R")
makeCacheMatrix(matrix(1:4,2,2))
setwd("C:/Users/IBM_ADMIN/ProgrammingAssignment2")
source("cachematrix.R")
cacheSolve(makeCacheMatrix(c(1,2,3,4)))
cacheSolve(makeCacheMatrix(c(1,2,3,4),2,))
cacheSolve(makeCacheMatrix(c(1,2,3,4),2,2))
cacheSolve(makeCacheMatrix(matrix(c(1,2,3,4),2,2))
)
cacheSolve(makeCacheMatrix(matrix(c(1,2,3,4),2,2)))
cacheSolve(makeCacheMatrix(matrix(c(1,3,3,4),2,2)))
cacheSolve(makeCacheMatrix(matrix(1:4,2,2))
)
cacheSolve(makeCacheMatrix(matrix(c(1,2,3,4),2,2)))
cacheSolve(matrix(1:4,2,2),...)
makeCacheMatrix()
cacheSolve(matrix(1:4,2,2))
cacheSolve(makeCacheMatrix(matrix(1:4,2,2)))
source("cachematrix.R")
cacheSolve(makeCacheMatrix(matrix(1:4,2,2)))
cacheSolve(makeCacheMatrix(matrix(1:4,2,2)))
makeCacheMatrix(matrix(1:4,2,2))
source("cachematrix.R")
cacheSolve(makeCacheMatrix(matrix(1:4,2,2)))
cacheSolve(makeCacheMatrix(matrix(1:6,2,3)))
cacheSolve(matrix(1:4,2,2))
cacheSolve(matrix(1:4,2,2),matrix(1:4,2,2))
cacheSolve(matrix(1:4,2,2),getInverse=NULL)
cacheSolve("get"=matrix(1:4,2,2),"getInverse"=NULL)
cacheSolve(x = c(get=matrix(1:4,2,2),getInverse=NULL))
cacheSolve(c(get=matrix(1:4,2,2),getInverse=NULL))
cacheSolve(list(set = matrix(1:4,2,2),get= matrix(1:4,2,2),setInverse=NULL,getInverse=NULL)
)
cacheSolve(list(set = matrix(1:4,2,2),get= matrix(1:4,2,2),setInverse=numeric(),getInverse=numeric()))
y <- makeCacheMatrix(matrix(1:4,2,2))
y
cacheSolve(y)
message("getting cached data")
cacheSolve(makeCacheMatrix(matrix(1:16,4,4)))
cacheSolve(makeCacheMatrix(matrix(1:25,5,5)))
cacheSolve(makeCacheMatrix(matrix(2:10,3,3)))
cacheSolve(makeCacheMatrix(matrix(3:11,3,3)))
cacheSolve(makeCacheMatrix(matrix(c(1,2,2,1,2,11,2,3,4),3,3)))
cacheSolve(makeCacheMatrix(matrix(c(1,2,2,1,2,11,2,3,4),3,3)))
source("cachematrix.R")
cacheSolve(makeCacheMatrix(matrix(c(1,2,2,1,2,11,2,3,4),3,3)))
source("cachematrix.R")
y <-makeCacheMatrix(matrix(c(1,2,2,1,2,11,2,3,4),3,3))
y
source("cachematrix.R")
cacheSolve(makeCacheMatrix(matrix(c(1,2,2,1,2,11,2,3,4),3,3)))
y <- makeCacheMatrix(matrix(c(1,2,2,1,2,11,2,3,4),3,3))
y
y$setInverse
y$getInverse
m <- y$getInverse
m
is.null(m)
!is.null(m)
cacheSolve(y)
source("cachematrix.R")
y <- makeCacheMatrix(matrix(c(1,2,2,1,2,11,2,3,4),3,3))
cacheSolve(y)
m
y
x$get
y$get
y$get()
y$getInverse()
solve(x$get())
solve(y$get())
source("cachematrix.R")
y <- makeCacheMatrix(matrix(c(1,2,2,1,2,11,2,3,4),3,3))
cacheSolve(y)
x <- cacheSolve(y)
source("cachematrix.R")
y <- makeCacheMatrix(matrix(c(1,2,2,1,2,11,2,3,4),3,3))
cacheSolve(y)
source("cachematrix.R")
y <- makeCacheMatrix(matrix(c(1,2,2,1,2,11,2,3,4),3,3))
cacheSolve(y)
source("cachematrix.R")
> y <- makeCacheMatrix(matrix(c(1,2,2,1,2,11,2,3,4),3,3))
> cacheSolve(y)
y <- makeCacheMatrix(matrix(c(1,2,2,1,2,11,2,3,4),3,3))
cacheSolve(y)
cacheSolve(y)
source("cachematrix.R")
cacheSolve(y)
?return
source("cachematrix.R")
y <- makeCacheMatrix(matrix(c(1,2,2,1,2,11,2,3,4),3,3))
cacheSolve(y)
source("cachematrix.R")
y <- makeCacheMatrix(matrix(c(1,2,2,1,2,11,2,3,4),3,3))
cacheSolve(y)
source("cachematrix.R")
y <- makeCacheMatrix(matrix(c(1,2,2,1,2,11,2,3,4),3,3))
cacheSolve(y)
source("cachematrix.R")
y <- makeCacheMatrix(matrix(c(1,2,2,1,2,11,2,3,4),3,3))
cacheSolve(y)
y$getInverse()
data <- y$get()
data
m <- solve(data, ...)
m <- solve(data)
x$setInverse(m)
y$setInverse(m)
y
y$setInverse(m)
a <- y$setInverse(m)
a
m
m
cacheSolve(y)
cacheSolve(makeCacheMatrix(1:4,2,2))
cacheSolve(makeCacheMatrix(matrix(1:4,2,2)))
z <- makeCacheMatrix(matrix(1:4,2,2))
cacheSolve(z)
cacheSolve(z)
cacheSolve(y)
y <- makeCacheMatrix(matrix(1:4,2,2))
cacheSolve(y)
cacheSolve(y)
source("cachematrix.R")
y <- makeCacheMatrix(matrix(1:4,2,2))
cacheSolve(y)
cacheSolve(y)
y <- makeCacheMatrix(matrix(2:5,2,2))
y$getInverse()
cacheSolve(y)
y$setInverse()
y$setInverse(m)
y$getInverse()
m
cacheSolve(y)
y <- makeCacheMatrix(matrix(2:5,2,2))
m
cacheSolve(y)
m
y$getInverse()
cacheSolve(y)
m
m <- numeric()
cacheSolve(y)
cacheSolve(z)
cacheSolve(y*z)
cacheSolve(yz)
cacheSolve(y+z)
cacheSolve(y %*% z)
y %*% z
y
makeCacheMatrix(a %*% data)
cacheSolve(makeCacheMatrix(a %*% data))
source("cachematrix.R")
cacheSolve(makeCacheMatrix(matrix(c(1,2,4,3),2,2)))
